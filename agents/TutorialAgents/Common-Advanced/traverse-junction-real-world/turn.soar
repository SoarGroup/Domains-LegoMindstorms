# Once the robot has centered on the junction, 
# it must turn to face the new direction

sp {traverse-junction-real-world*propose*turn
  (state <s> ^name traverse-junction-real-world
              ^relative-direction <dir>
              ^top-state <top>)
  (<top> ^centered-on-junction true
          -^turned)
-->
  (<s> ^operator <o> +)
  (<o> ^name turn
        ^relative-direction <dir>)
}

sp {traverse-junction-real-world*elaborate*turn*right
  (state <s> ^name traverse-junction-real-world
              ^operator <o> +
              ^left-motor-port <left-port>)
  (<o> ^name turn
        ^relative-direction right)
-->
  (<o> ^left-motor-direction forward
        ^right-motor-direction backward
        ^turn-amount 300
        ^track-port <left-port>)
}

sp {traverse-junction-real-world*elaborate*turn*backward
  (state <s> ^name traverse-junction-real-world
              ^operator <o> +
              ^left-motor-port <left-port>)
  (<o> ^name turn
        ^relative-direction backward)
-->
  (<o> ^left-motor-direction forward
        ^right-motor-direction backward
        ^turn-amount 600
        ^track-port <left-port>)
}

sp {traverse-junction-real-world*elaborate*turn*left
  (state <s> ^name traverse-junction-real-world
              ^operator <o> +
              ^right-motor-port <right-port>)
  (<o> ^name turn
        ^relative-direction left)
-->
  (<o> ^left-motor-direction backward
        ^right-motor-direction forward
        ^turn-amount 300
        ^track-port <right-port>)
}

sp {traverse-junction-real-world*apply*turn*forward*mark*turned
  (state <s> ^name traverse-junction-real-world
              ^operator <o>
              ^top-state <top>)
  (<o> ^name turn
        ^relative-direction forward)
-->
  (<top> ^turned true)
}

sp {traverse-junction-real-world*apply*turn*send*motor*commands
  (state <s> ^name traverse-junction-real-world
              ^operator <o>
              ^io.output-link <out>
              ^left-motor-port <left-port>
              ^right-motor-port <right-port>)
  (<o> ^name turn
        ^left-motor-direction <left-dir>
        ^right-motor-direction <right-dir>)
-->
  (<out> ^motor <left>
         ^motor <right>)
  (<left> ^port <left-port>
           ^set-direction <left-dir>
          ^set-power 40)
  (<right> ^port <right-port>
            ^set-direction <right-dir>
           ^set-power 40)
}

sp {traverse-junction-real-world*apply*turn*mark*desired*rotation
  (state <s> ^name traverse-junction-real-world
              ^operator <o>
              ^io.input-link.motor <motor>
              ^top-state <top>)
  (<o> ^name turn
        ^turn-amount <turn-amt>
        ^track-port <port>)
  (<top> -^desired-rotation)
  (<motor> ^port <port>
            ^amount-rotated <amt>)
-->
  (<top> ^desired-rotation (+ <amt> <turn-amt>))
}

sp {traverse-junction-real-world*apply*turn*mark*turned
  (state <s> ^name traverse-junction-real-world
              ^operator <o>
              ^top-state <top>
              ^io.input-link.motor <motor>
              ^io.output-link <out>
              ^left-motor-port <left-port>
              ^right-motor-port <right-port>)
  (<o> ^name turn
        ^track-port <port>)
  (<top> ^desired-rotation <rot>)
  (<motor> ^port <port>
            ^amount-rotated > <rot>)
-->
  (<top> ^turned true)
}

