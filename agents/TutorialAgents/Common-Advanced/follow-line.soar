###################################################
# This file contains the following operators:
#	follow-line
#	move-left
#	move-right
#	move-forward
#
# This should be a total of nine rules
###################################################

###################################################
#	follow-line operator
###################################################

sp {Common-Advanced*top-state*propose*follow-line
	(state <s>	^name line-follower
				^color-sensor-values <vals>
				^mode follow
				-^junction-color)
-->
	(<s> ^operator <o> +)
	(<o> ^name follow-line)
}

###################################################
#	move-forward operator
###################################################

# Propose the move-forward operator if the current
# detected color sensor value is the forward value
# and our mode is "follow"
sp {Common-Advanced*follow-line*propose*move-forward
	(state <s>	^name follow-line
				^superstate <ss>)
	(<ss>		^color-turn <turn>
				^color-sensor-values <values>
				-^needs-rotation
				-^rotation-amount)
	(<values>	^center black)
-->
	(<s> ^operator <o> +)
	(<o> ^name move-forward)
}

# Apply the move-forward operator if we have the
# move-forward operator selected, an output link,
# a left motor port, and a right motor port.
sp {Common-Advanced*follow-line*apply*move-forward
	(state <s>	^name follow-line
            	^operator.name move-forward
				^superstate <ss>)
	(<ss>		^operator.name follow-line
				^io.output-link <out>
				^left-motor-port <left-port>
				^right-motor-port <right-port>)
-->
	# Create a command for each motor on the output
	# link
	(<out>	^motor <left>
			^motor <right>)
	(<left>		^port <left-port>
				^set-direction forward
				^set-power 10)
	(<right>	^port <right-port>
				^set-direction forward
				^set-power 10)
}

###################################################
#	move-left operator
###################################################

sp {Common-Advanced*follow-line*propose*move-left
	(state <s>	^name follow-line
				^superstate <ss>)
	(<ss>		^color-sensor-values <values>)
	(<values>	^center <> black
				^left black
				^right <> black)
-->
	(<s> ^operator <o> +)
	(<o> ^name move-left)
}

sp {Common-Advanced*follow-line*apply*move-left
	(state <s>	^name follow-line
            	^operator.name move-left
				^superstate <ss>)
	(<ss>		^operator.name follow-line
				^io.output-link <out>
				^left-motor-port <left-port>
				^right-motor-port <right-port>)
-->
	(<ss>	^needs-rotation left)
	(<out>	^motor <left>
			^motor <right>)
	(<left>	^port <left-port>
					^set-direction backward
					^set-power 10)
	(<right>	^port <right-port>
					 ^set-direction backward
					 ^set-power 10)
}

sp {Common-Advanced*follow-line*propose*rotation-left
	(state <s>	^name follow-line
				^superstate <ss>)
	(<ss>		^io.output-link <out>
				^needs-rotation left
				^color-sensor-values <values>)
	(<values>	^center black
				^left <> black)
-->
	(<s>	^operator.name rotation-left)
}

sp {Common-Advanced*follow-line*apply*rotation-left*motor
	(state <s>	^name follow-line
            	^operator.name rotation-left
				^superstate <ss>)
	(<ss>		^operator.name follow-line
				^io.output-link <out>
				^left-motor-port <left-port>
				^right-motor-port <right-port>)
-->
	(<out>	^motor <left>
			^motor <right>)
	(<left>	^port <left-port>
					^set-direction backward
					^set-power 20)
	(<right>	^port <right-port>
					 ^set-direction forward
					 ^set-power 20)
}

sp {Common-Advanced*follow-line*apply*rotation-left*save
	(state <s>	^operator.name rotation-left
				^superstate <ss>)
	(<ss>		^operator.name follow-line
				^left-motor-port <left-port>
				^io.input-link.motor <m>
				-^rotation-amount)
	(<m>		^port left-port
				^amount-rotated <value>)
-->
	(<ss>	^rotation-amount (- <value> 75))
}

sp {Common-Advanced*follow-line*apply*rotation-left*remove-rotation-amount
	(state <s>	^operator.name rotation-left
				^superstate <ss>)
	(<ss>		^operator.name follow-line
				^left-motor-port <left-port>
				^right-motor-port <right-port>
				^io.input-link.motor <m>
				^io.output-link  <out>
				^rotation-amount <amount>
				^needs-rotation <v>)
	(<m>		^port <left-port>
				^amount-rotated <= <amount>)
-->
	(<ss>	^rotation-amount <amount> -)
	(<out>	^motor <left>
			^motor <right>)
	(<left>	^port <left-port>
					^set-direction forward
					^set-power 0)
	(<right>	^port <right-port>
					 ^set-direction backward
					 ^set-power 0)
}

###################################################
#	move-right operator
###################################################

sp {Common-Advanced*follow-line*propose*move-right
	(state <s>	^name follow-line
				^superstate <ss>)
	(<ss>		^color-sensor-values <values>)
	(<values>	^center <> black
				^left <> black
				^right black)
-->
	(<s> ^operator <o> +)
	(<o> ^name move-right)
}

sp {Common-Advanced*follow-line*apply*move-right
	(state <s>	^name follow-line
            	^operator.name move-right
				^superstate <ss>)
	(<ss>		^operator.name follow-line
				^io.output-link <out>
				^left-motor-port <left-port>
				^right-motor-port <right-port>)
-->
	(<ss>	^needs-rotation right)
	(<out>	^motor <left>
			^motor <right>)
	(<left>	^port <left-port>
					^set-direction backward
					^set-power 10)
	(<right>	^port <right-port>
					 ^set-direction backward
					 ^set-power 10)
}

sp {Common-Advanced*follow-line*propose*rotation-right
	(state <s>	^name follow-line
				^superstate <ss>)
	(<ss>		^io.output-link <out>
				^needs-rotation right
				^color-sensor-values <values>)
	(<values>	^center black
				^right <> black)
-->
	(<s>	^operator.name rotation-right)
}

sp {Common-Advanced*follow-line*apply*rotation-right*motor
	(state <s>	^name follow-line
            	^operator.name rotation-right
				^superstate <ss>)
	(<ss>		^operator.name follow-line
				^io.output-link <out>
				^left-motor-port <left-port>
				^right-motor-port <right-port>)
-->
	(<out>	^motor <left>
			^motor <right>)
	(<left>	^port <left-port>
					^set-direction forward
					^set-power 20)
	(<right>	^port <right-port>
					 ^set-direction backward
					 ^set-power 20)
}

sp {Common-Advanced*follow-line*apply*rotation-right*save
	(state <s>	^operator.name rotation-right
				^superstate <ss>)
	(<ss>		^operator.name follow-line
				^right-motor-port <right-port>
				^io.input-link.motor <m>
				-^rotation-amount)
	(<m>		^port <right-port>
				^amount-rotated <value>)
-->
	(<ss>	^rotation-amount (- <value> 75))
}

sp {Common-Advanced*follow-line*apply*rotation-right*remove-rotation-amount
	(state <s>	^operator.name rotation-right
				^superstate <ss>)
	(<ss>		^operator.name follow-line
				^right-motor-port <right-port>
				^left-motor-port <left-port>
				^io.input-link.motor <m>
				^io.output-link <out>
				^rotation-amount <amount>
				^needs-rotation <v>)
	(<m>		^port <right-port>
				^amount-rotated <= <amount>)
-->
	(<ss>	^rotation-amount <amount> -)
	(<out>	^motor <left>
			^motor <right>)
	(<left>	^port <left-port>
					^set-direction forward
					^set-power 0)
	(<right>	^port <right-port>
					 ^set-direction backward
					 ^set-power 0)
}

sp {Common-Advanced*follow-line*apply*rotation*remove-needs-rotation
	(state <s>	^operator.name << rotation-right rotation-left >>
				^superstate <ss>)
	(<ss>		^operator.name follow-line
				^io.input-link.motor <m>
				-^rotation-amount
				^needs-rotation <v>
				^color-sensor-values <csv>)
	(<csv>		^left << black white >>
				^right << black white >>
				^center << black white >>)
-->
	(<ss>	^needs-rotation <v> -)
}

sp {Common-Advanced*follow-line*apply*rotation*move-forward
	(state <s>	^operator.name << rotation-right rotation-left >>
				^superstate <ss>)
	(<ss>		^operator.name follow-line
				^left-motor-port <left-port>
				^right-motor-port <right-port>
				^io.output-link <out>
				-^rotation-amount
				^needs-rotation <v>
				^color-sensor-values <csv>)
	(<csv>		^<< left center right >> <> black <> white)
-->
	(<out>	^motor <left>
			^motor <right>)
	(<left>		^port <left-port>
				^set-direction forward
				^set-power 10)
	(<right>	^port <right-port>
				^set-direction forward
				^set-power 10)
}
