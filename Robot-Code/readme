Readme for running Soar on the Lego Ev3

-------------------------------------------
Directory Contents
-------------------------------------------

bin 			- holds binaries for the various end programs
doc       - documentation for the project
lms_api 	-	example code found online from the bricxcc project, 
						not directly used but useful for a reference
lmsasm 		- lms assember
						compiles rbf programs that can be executed from the brick menu
native    - binaries compiled for the arm architecture 
src 			- source code for the lego soar project

-------------------------------------------
Setup Guide
-------------------------------------------
Guide to how to get things running (Assuming linux)

1. Compiling arm programs prereqs
If you want to be able to compile programs for the Ev3 robot, 
you need to get the arm cross-compiler.

sudo apt-get install gcc-arm-linux-gnueabi g++-arm-linux-gneuabi

2. Compiling 

There are 3 makefiles to compile each of the programs
(run with make -f <filename>)

Before you compile, make sure the following environment variable are set:
  export SOAR_HOME=/path/to/soar/out
  export EV3=/path/to/legomindstorms/Robot-Code

make_soar_client.mak
 The client program running soar remotely on a laptop
   and connecting to the robot via TCP
  
make_ev3_server.mak
 The server program running on the lego robot
   and connecting to the soar_client via TCP

make_ev3_standalone.mak
 The main file for a program that can run on the lego robot by itself
   including soar

---------------------------------------------------------
Running
---------------------------------------------------------

1. Connecting to the robot

First, telnet into the robot
Username is root
Password is blank

To enable ssh access (or scp), execute the command dropbear


2. Running the soar_client
(Requires SOAR_HOME environment variable to be set)

./soar_client IP_ADDRESS AGENT_FILE

For example:
./soar_client 192.168.1.15 ../agents/button-test.soar


3. Running the ev3_server

Transfer the binaries to the robot (can use the one in native)
 scp native/libstdc\+\+.so.6 root@IP_ADDRESS:/media/card
 scp native/ev3_server root@IP_ADDRESS:/media/card

Telnet into the robot and navigate to /media/card
Set the LD_LIBRARY_PATH variable
 export LD_LIBRARY_PATH=/media/card

Run the ev3_server
 ./ev3_server


4. Running the ev3_standalone program from a terminal

Transfer the binaries to the robot (can use the one in native)
 scp native/libstdc\+\+.so.6 root@IP_ADDRESS:/media/card/lib/libstdc\+\+.so.6
 scp native/ev3_standalone root@IP_ADDRESS:/media/card

Copy any necessary soar agent files to the robot using scp

Set the LD_LIBRARY_PATH variable
 export LD_LIBRARY_PATH=/media/card

Run the ev3_standalone as
 ./ev3_standalone AGENT_SOURCE LOGGING_TYPE
   AGENT_SOURCE - the soar file to source
   LOGGING_TYPE - either none, file, or cout

Example:
 ./ev3_standalone button-test.soar file
 (File writes to /media/card/log)


5. Running ev3_standalone from the brick menu

Transfer the binaries to the robot (can use the one in native)
 scp native/libstdc\+\+.so.6 root@IP_ADDRESS:/media/card/lib/libstdc\+\+.so.6
 scp native/ev3_standalone root@IP_ADDRESS:/media/card

Copy any necessary soar agent files to the robot using scp

Copy Robot-Code/lmsasm/runprog.rbf to the robot using scp 
  (put in /media/card/myapps)
  scp lmsasm/runprog.rbf root@IP_ADDRESS:/media/card/myapps/runprog.rbf

Create a config file and copy it to the robot using scp
  The config file should consist of two lines:
    source /media/card/button-test.soar
    logging file
  Make sure you do an absolute path for the source
  logging option can be either none, file, or cout

Then navigate on the brick menu to the file tab, then sd_card/myapps, 
  and click on runprog

Warning! Your soar agent should create the command 
  (state <s> ^io.output-link.manager.exit true)
  to properly stop the program (e.g. when the escape button is pressed)
  Otherwise it will make the brick menu unresponsive and you'll have to 
  kill the process from the terminal


----------------------------------------------------
Soar Interface
---------------------------------------------------

Color modes
reflect, ambient, color

Remote modes
proximity, remote, beacon
